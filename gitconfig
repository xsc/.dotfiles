[user]
    name = Yannick Scherer
    email = yannick.scherer@futurice.com
    signingkey = FCC8CDA4

[color]
    branch = auto
    diff = auto
    status = auto

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

# see: http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
[alias]
    st = status -sb

    cl = clone
    up = pull --ff-only --all -p
    upr = pull --rebase --all -p
    ffs = "!git upr && git push"
    lgtm = -c core.editor=true merge -S --no-ff
    rebase-date = rebase --ignore-date
    amend-date = -c core.editor=true commit --amend --date=now
    pu = push -u
    puf = push -uf
    current-branch = rev-parse --abbrev-ref HEAD
    deploy = "!f() {\
        local x=$(git current-branch);\
        git checkout deployment && \
        git merge $x && \
        git push && \
        git checkout $x;}; f"

    rbm = rebase master
    rbim = rebase -i master
    autosquash = -c core.editor=true rebase -i --autosquash

    ci = commit
    cm = commit -m
    ca = commit -a
    cf = commit --fixup
    cam = commit -a -m
    amend = commit --amend
    caa = commit -a --amend -C HEAD
    filelog = log -u
    fl = log -u
    sh = show --format=fuller

    ai = add --interactive
    co = checkout

    merged-when = "!f() { git rev-list -1 --format=%p \"$1\" | grep -v commit | xargs -I {} sh -c 'git rev-list -1 --format=\"%ci\" {}' | grep -v commit; }; f"
    merged-when-relative = "!f() { git rev-list -1 --format=%p \"$1\" | grep -v commit | xargs -I {} sh -c 'git rev-list -1 --format=\"%cr\" {}' | grep -v commit; }; f"

    cleanup = "!git branch --merged | grep -v '^  master$' | grep -v '^  develop$' | grep -v '^\\*' | xargs git branch -d"
    cleanup-remote = "!f() {\
        local remote=\"$1\";\
        local pattern=\"$2\";\
        if [ -z \"$remote\" ]; then remote='origin'; fi;\
        if [ -z \"$pattern\" ]; then pattern='.'; fi;\
        pattern=\"^  $remote/$pattern\";\
        echo \"---> Removing remote branches matching: '$pattern'\";\
        local branches=$(\
            git branch -r --merged|\
            grep \"^  $remote/\"|\
            grep -v \"$remote/HEAD ->\"|\
            grep -v \"$remote/master\\$\"|\
            grep -v \"$remote/develop\\$\"|\
            grep -v \"$remote/development\\$\"|\
            grep -e \"$pattern\"|\
            sed \"s/^  $remote\\///\"\
        );\
        if [ -z \"$branches\" ]; then echo \"No branches.\"; return 0; fi;\
        for branch in $branches; do\
            echo \"* [$(git merged-when-relative \"$remote/$branch\")] $branch\";\
        done;\
        read -p \"Are you sure? \" -n 1 -r; echo;\
        if [[ $REPLY =~ ^[Yy]$ ]]; then\
            echo $branches | xargs git push \"$remote\" --no-verify --delete;\
        fi;}; f"
    br = branch
    brm = branch --no-merged
    brs = for-each-ref --sort=-committerdate --format="%(committerdate:relative)%09%(refname:short)" refs/heads
    bra = branch -ra

    #list commands
    le = log --oneline --decorate
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(yellow)%h%C(reset) - %C(blue)(%ar)%C(reset) %s - %C(cyan)%an%C(reset)%C(red)%d%C(reset)' --all
    lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) - %aD %C(blue)(%ar)%C(reset)%C(red)%d%C(reset)%n''          %s%C(reset) - %C(cyan)%an%C(reset)' --all
    lg = !"git lg1"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

    #list all aliases
    la = "!git config -l | grep alias | cut -c 7- | sort"
    d = diff
    dc = diff --cached

    #diff last commit
    dlc = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat -n 1 -p --full-diff
    dr  = "!f() { git diff "$1"^.."$1"; }; f"
    diffr  = "!f() { git diff "$1"^.."$1"; }; f"
    changes = diff --stat --color
    branch = branch -ra

    #reset commands
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

    #git svn
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

    #stash
    sl = stash list
    sa = stash apply
    ss = stash save

    cp = cherry-pick
    grep = grep -Ii
    gr = grep -Ii
    #grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

    #grep on filename
    f = "!git ls-files | grep -i"

    #rename branch tree to done-
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

    #assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    #show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
    #unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    #merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"
    serve = daemon --verbose --export-all --base-path=.git --reuseaddr --strict-paths .git/
[push]
    default = current
[core]
    excludesfile = ~/.gitignore
    whitespace = trailing-space,space-before-tab
    pager = diff-so-fancy | less --tabs=4 -RFX
[apply]
    whitespace = fix
[web]
    browser = open
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
